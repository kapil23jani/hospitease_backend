from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy import text
from sqlalchemy.orm import sessionmaker
import pandas as pd
import openai
import os
from datetime import date
from dotenv import load_dotenv

router = APIRouter()

# âœ… Use your real DB URL
DATABASE_URL = "postgresql+asyncpg://hospitease_admin:postgres@localhost:5432/hospitease_backend"

# Create async engine and session
engine = create_async_engine(DATABASE_URL, echo=False)
AsyncSessionLocal = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# Load schema once
SCHEMA_FILE_PATH = "/Users/kapiljani/Desktop/hospitease-prod/hospitease-backend/hospitease_schema_minimal.sql"
with open(SCHEMA_FILE_PATH, "r") as f:
    SCHEMA_CONTENT = f.read()

# OpenAI setup
load_dotenv()
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

class PromptRequest(BaseModel):
    prompt: str

@router.post("/api/smart-report")
async def smart_report(request: PromptRequest):
    try:
        gpt_response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are a SQL expert. Given a schema and user prompt, return only the SQL query with no explanation. "
                        "If the prompt refers to blood pressure, always use the column named 'blood_pressure'."
                    )
                },
                {
                    "role": "user",
                    "content": f"Schema:\n{SCHEMA_CONTENT}\n\nPrompt:\n{request.prompt}"
                }
            ],
            temperature=0.2
        )
        sql_query = gpt_response.choices[0].message.content.strip()

        print("Generated SQL:", sql_query)
        if not sql_query.lower().startswith(("select", "insert", "update", "delete")):
            raise HTTPException(
                status_code=400,
                detail=f"Invalid SQL generated by GPT: {sql_query}"
            )

        async with AsyncSessionLocal() as session:
            try:
                result = await session.execute(text(sql_query))
                rows = result.fetchall()
                columns = result.keys()
                df = pd.DataFrame(rows, columns=columns)
            except Exception as db_exc:
                print("DB Error:", db_exc)
                raise HTTPException(status_code=500, detail=f"DB Error: {db_exc}")

        if df.empty:
            return {"message": "No data found for the given prompt."}

        findings = {
            "total_rows": len(df),
            "columns": list(df.columns)
        }

        data = df.to_dict(orient="records")

        suggested_chart = None
        if "age" in df.columns:
            suggested_chart = {
                "type": "bar",
                "column": "age"
            }

        return {
            "findings": findings,
            "data": data,
            "suggestedChart": suggested_chart
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
